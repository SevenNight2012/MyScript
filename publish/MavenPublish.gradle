apply plugin: 'maven'

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

println properties.hasProperty("MAVEN_USER_NAME") ? properties.MAVEN_USER_NAME : "未配置用户名"
println properties.hasProperty("MAVEN_USER_PWD") ? properties.MAVEN_USER_PWD : "未配置密码"
println properties.hasProperty("MAVEN_REPO_URL") ? properties.MAVEN_REPO_URL : "未配置仓库地址"

/**
 * 获取用户名
 *
 * @return 用户名
 */
def getRepositoryUsername() {
    return properties.getProperty("MAVEN_USER_NAME")
}

/**
 * 获取密码
 *
 * @return 密码
 */
def getRepositoryPassword() {
    return properties.getProperty("MAVEN_USER_PWD")
}

/**
 * 获取仓库地址
 *
 * @return 仓库地址
 */
def getRepoUrl() {
    return properties.getProperty("MAVEN_REPO_URL")
}

static def isEmpty(String text) {
    return text == null || text.length() == 0
}

static def isNotEmpty(String text) {
    return !isEmpty(text)
}

boolean hasLibName = project.hasProperty("libraryName")
def libraryName = project.name
if (hasLibName && isNotEmpty(project.libraryName)) {
    libraryName = project.libraryName
}

//def isLocalPublish = true
//if (project.hasProperty("localPublish")) {
//    isLocalPublish = project.localPublish.toBoolean()
//}

//snapshot版本暂时和release版本一样，snapshot版本可以覆盖，
//所以如果使用需要慎重，极有可能用着用着就找不到类了，故不建议使用
def releaseRepositoryUrl = getRepoUrl()
//def snapshotRepositoryUrl = isLocalPublish ? mavenLocalSnapshot : mavenSnapshot

group = project.GROUP
version = project.VERSION

System.err.println("************************* Upload Info *****************************")
println "dependency  >> implementation \"" + group + ":" + libraryName + ":" + version + "\""
//println "isLocalPublish           : " + isLocalPublish
println "releaseRepositoryUrl     : " + releaseRepositoryUrl
//println "snapshotRepositoryUrl    : " + snapshotRepositoryUrl
System.err.println("*******************************************************************")

if (project.hasProperty("android")) { // Android libraries
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }
} else { // Java libraries
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}
tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: releaseRepositoryUrl) {
                authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
            }

            // 发布到maven的相关信息
            pom.groupId = group// 项目包名
            pom.artifactId = libraryName// 库名
            pom.version = version// 版本号
        }
    }
}